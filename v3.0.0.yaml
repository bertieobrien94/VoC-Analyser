openapi: 3.1.0
info:
  title: VoC-Analyser API (v3.0 schema)
  version: 3.0.0
  description: >
    OpenAPI for Feedback Items and Terms (single hierarchical taxonomy table).
    Aligns with v3.0 instructions: Type enum, Term_ID, mapping_level, mapping_confidence,
    canonicalization via Canonical_ID, and bulk remap by Term.
servers:
  - url: https://api.sheetbest.com
security:
  - sheetbestApiKey: []

components:
  securitySchemes:
    sheetbestApiKey:
      type: apiKey
      in: header
      name: X-Api-Key

  parameters:
    TermIdParam:
      name: Term_ID
      in: path
      required: true
      description: Primary key of a Term row
      schema: { type: string }
    FeedbackIdParam:
      name: Feedback_ID
      in: path
      required: true
      description: Primary key of a Feedback row
      schema: { type: string }

  schemas:
    FeedbackItem:
      type: object
      description: Canonical structured feedback row (v3.0)
      required:
        - Feedback_ID
        - Summary
        - Quote
        - Person
        - Timestamp
        - Type
        - Created_By
        - Created_At
        - Updated_At
      properties:
        Feedback_ID: { type: string, description: "Stable ID, like fb_000072" }
        Summary:     { type: string, description: "LLM-generated (3–10 words)" }
        Quote:       { type: string, description: "Verbatim customer excerpt" }
        Person:      { type: string, description: "Name or 'Unknown'" }
        Timestamp:   { type: string, description: "ISO-8601 or 'Unknown'" }
        Type:
          type: string
          description: "Feedback classification (see instructions Step 2a)"
          enum: ["Positive feedback","Change request","Needs clarification","Market insight","Opportunity"]
        Term_ID:
          type: string
          nullable: true
          description: "FK to Terms (Status=Active)."
        Source_Type:
          type: string
          enum: ["Email","Transcript","Message","Support ticket","RFI/RFP","Unknown"]
        Source_Ref:  { type: string, nullable: true, description: "URL/transcript/file ref" }
        mapping_level:
          type: integer
          enum: [1,2,3]
          description: "1=Category, 2=Subcategory, 3=Subject"
        mapping_confidence:
          type: number
          minimum: 0
          maximum: 1
          description: "Confidence for the assigned Term"
        Created_By:  { type: string }
        Created_At:  { type: string, format: date-time }
        Updated_At:  { type: string, format: date-time }

    FeedbackItemUpdate:
      type: object
      description: Partial update for a Feedback row; include only fields you want to change.
      minProperties: 1
      additionalProperties: false
      properties:
        Type:
          type: string
          description: "Feedback classification (see instructions Step 2a)"
          enum: ["Positive feedback","Change request","Needs clarification","Market insight","Opportunity"]
        Term_ID:
          type: string
          nullable: true
          description: "FK to Terms (Status=Active)."
        mapping_level:
          type: integer
          enum: [1,2,3]
          description: "1=Category, 2=Subcategory, 3=Subject"
        mapping_confidence:
          type: number
          minimum: 0
          maximum: 1
          description: "Confidence for the assigned Term"
        Updated_At:  { type: string, format: date-time }

    Term:
      type: object
      description: Single-table hierarchical taxonomy term (v3.0)
      required: [ Term_ID, Term, Level, Status, Created_By, Created_At, Updated_At ]
      properties:
        Term_ID:     { type: string, description: "Stable unique ID, e.g., tx_0001" }
        Term:        { type: string, description: "Display name (localizable)" }
        Slug:        { type: string, description: "URL-safe identifier", nullable: true }
        Level:
          type: integer
          enum: [1,2,3]
          description: "1=Category, 2=Subcategory, 3=Subject"
        Definition:  { type: string, nullable: true }
        Synonyms:    { type: string, nullable: true, description: "Semicolon-separated list" }
        Status:
          type: string
          enum: [Active, Deprecated, Draft]
        Parent_ID:    { type: string, nullable: true, description: "NULL for Level=1; Level 2→L1; Level 3→L2" }
        Canonical_ID: { type: string, nullable: true, description: "Active replacement for Deprecated terms" }
        Ordinal:     { type: integer, minimum: 0, nullable: true }
        Depth:       { type: integer, nullable: true }
        Path_IDs:    { type: string, nullable: true }
        Path_Slugs:  { type: string, nullable: true }
        Notes:       { type: string, nullable: true }
        Created_By:  { type: string }
        Created_At:  { type: string, format: date-time }
        Updated_At:  { type: string, format: date-time }

    TermUpdate:
      type: object
      description: Partial update for a Term row; include only fields you want to change.
      minProperties: 1
      additionalProperties: false
      properties:
        Term:        { type: string, description: "Display name (localizable)" }
        Slug:        { type: string, nullable: true, description: "URL-safe identifier" }
        Level:
          type: integer
          enum: [1,2,3]
          description: "1=Category, 2=Subcategory, 3=Subject"
        Definition:  { type: string, nullable: true }
        Synonyms:    { type: string, nullable: true, description: "Semicolon-separated list" }
        Status:
          type: string
          enum: [Active, Deprecated, Draft]
        Parent_ID:    { type: string, nullable: true, description: "NULL for Level=1; Level 2→L1; Level 3→L2" }
        Canonical_ID: { type: string, nullable: true, description: "Active replacement for Deprecated terms" }
        Ordinal:     { type: integer, minimum: 0, nullable: true }
        Depth:       { type: integer, nullable: true }
        Path_IDs:    { type: string, nullable: true }
        Path_Slugs:  { type: string, nullable: true }
        Notes:       { type: string, nullable: true }
        Created_By:  { type: string }
        Created_At:  { type: string, format: date-time }
        Updated_At:  { type: string, format: date-time }

paths:

  ############################
  # TERMS (taxonomy v3.0)
  ############################

  /sheets/895dac3e-2ad5-4f1a-96e7-ae12687b0cfa:
    get:
      operationId: listTerms
      summary: List Terms
      description: List Terms with optional client-side filtering.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Term' }
    post:
      operationId: createTerm
      summary: Create Term
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Term' }
      responses:
        '201': { description: Created }

  /sheets/895dac3e-2ad5-4f1a-96e7-ae12687b0cfa/Term_ID/{Term_ID}:
    patch:
      operationId: updateTerm
      summary: Update Term by Term_ID
      parameters:
        - name: Term_ID
          in: path
          required: true
          description: Primary key of a Term row
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TermUpdate' }
      responses:
        '200': { description: Updated }

  ##################################
  # FEEDBACK ITEMS (v3.0 schema)
  ##################################

  /sheets/e1b92735-b604-4564-a285-c0e5c2614cb0:
    get:
      operationId: listFeedbackItems
      summary: List Feedback Items
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/FeedbackItem' }
    post:
      operationId: createFeedbackItem
      summary: Create Feedback Item
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/FeedbackItem' }
      responses:
        '201': { description: Created }

  /sheets/e1b92735-b604-4564-a285-c0e5c2614cb0/Feedback_ID/{Feedback_ID}:
    patch:
      operationId: updateFeedbackItem
      summary: Update Feedback Item by Feedback_ID
      parameters:
        - name: Feedback_ID
          in: path
          required: true
          description: Primary key of a Feedback row
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/FeedbackItemUpdate' }
      responses:
        '200': { description: Updated }

  ###################################################
  # BULK REMAP: FeedbackItems by (old) Term_ID → new
  ###################################################
  /sheets/e1b92735-b604-4564-a285-c0e5c2614cb0/Term_ID/{Term_ID}:
    patch:
      operationId: bulkRemapFeedbackItemsByTerm
      summary: Bulk update FeedbackItems where Term_ID == old Term_ID
      description: >
        Use for canonicalization: remap all FeedbackItems from a deprecated Term to its Canonical_ID.
      parameters:
        - name: Term_ID
          in: path
          required: true
          description: Primary key of a Term row
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ Term_ID, Updated_At ]
              properties:
                Term_ID:
                  type: string
                  description: "The *new* canonical Term_ID to set"
                Updated_At:
                  type: string
                  format: date-time
      responses:
        '200': { description: Bulk Updated }
